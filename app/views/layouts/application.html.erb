<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Pet Registry" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <link rel="manifest" href="/manifest.json">
    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%= vite_client_tag %>
    <%= vite_stylesheet_tag 'application', data: { "turbo-track": "reload" } %>
    <%= vite_javascript_tag 'application.jsx' %>
    <script>
      // Force cache busting
      const timestamp = new Date().getTime();
      console.log("ðŸ”„ Cache busting timestamp:", timestamp);
    </script>

    <script>
      let FF_FOUC_FIX;
    </script>

    <%= yield :head %>
    <!--
      If using a JavaScript entrypoint file:
        vite_javascript_tag 'application'

      If using a .jsx entrypoint, add the extension:
        vite_javascript_tag 'application.jsx'

      Visit the guide for more information: https://vite-ruby.netlify.app/guide/rails
    -->

  </head>

  <body>
    <%#= yield %>
    <div id="root"></div>
    <script>
      console.log("ðŸ“„ Layout: HTML loaded, root div created");
      console.log("ðŸ“„ Layout: Root element:", document.getElementById("root"));

      // Check if Vite client is loaded
      console.log("ðŸ“„ Layout: Vite client loaded:", typeof window.ViteClient !== 'undefined');

      // Check for any script loading errors
      window.addEventListener('error', function(e) {
        console.error("ðŸ“„ Layout: Script error:", e.filename, e.message, e.lineno, e.colno);
        console.error("ðŸ“„ Layout: Error details:", e);
      });

      // Check for unhandled promise rejections
      window.addEventListener('unhandledrejection', function(e) {
        console.error("ðŸ“„ Layout: Unhandled promise rejection:", e.reason);
      });

      // Check if any scripts are loaded
      setTimeout(() => {
        console.log("ðŸ“„ Layout: Scripts after 2s:", document.querySelectorAll('script').length);
        console.log("ðŸ“„ Layout: All scripts:", Array.from(document.querySelectorAll('script')).map(s => s.src || 'inline'));

        // Check if React has rendered anything to the root
        const rootElement = document.getElementById("root");
        console.log("ðŸ“„ Layout: Root innerHTML after 2s:", rootElement.innerHTML);
        console.log("ðŸ“„ Layout: Root children after 2s:", rootElement.children.length);

        // If still empty, manually add content to test DOM manipulation
        if (rootElement.innerHTML === '') {
          console.log("ðŸ“„ Layout: Root still empty, adding manual test content");
          rootElement.innerHTML = '<div style="background: yellow; padding: 20px; text-align: center;"><h1>Manual DOM Test</h1><p>If you see this yellow box, DOM manipulation works but React is not rendering.</p></div>';
        }
      }, 2000);
    </script>
  </body>
  <footer>
    <div id="footer"></div>
  </footer>
</html>
